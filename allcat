exports.allcat = async (req, res) => {
    try {
        // Fetch cart items for the user's IP address
        const [provarRows, fields] = await pool.execute(
          "SELECT id, pid, vid, price, mrp FROM provar"
        );
        // Prepare arrays to store product IDs and variant IDs for fetching product details
        const productIds = [];
        const variantIds = [];
        const quantities = {};
        // Extract product IDs, variant IDs, and quantities from the provarRows
        provarRows.forEach((row) => {
          productIds.push(row.pid);
          variantIds.push(row.vid);
          quantities[`${row.pid}_${row.vid}`] = row.qty;
        });
        // Generate comma-separated list of product IDs and variant IDs
        const productIdList = productIds.join(",");
        const variantIdList = variantIds.join(",");
        // Fetch product details from product table
        const [productRows] = await pool.execute(
          `SELECT shop_id, name, description, img_1, img_2 FROM shop WHERE id IN (${productIdList})`
        );
        // Fetch individual prices from provar table
        const [priceRows] = await pool.execute(
          `SELECT pid, vid, price, mrp FROM provar WHERE pid IN (${productIdList}) AND vid IN (${variantIdList})`
        );
        // Construct the response object with product details and individual prices
        const products = productRows.map((product) => {
          const variantId = variantIds[productIds.indexOf(product.id)]; // Get variant ID for the current product
          const quantity = quantities[`${product.id}_${variantId}`] || 0; // Get quantity for the current product variant
          const price =
            priceRows.find(
              (priceRow) =>
                priceRow.pid === product.id && priceRow.vid === variantId
            )?.price || 0; // Get individual price for the current product variant
          const mrp =
            priceRows.find(
              (mrpRow) => mrpRow.pid === product.id && mrpRow.vid === variantId
            )?.mrp || 0; // Get individual mrp for the current product variant
          return {
            pid: product.id,
            vid: variantId,
            name: product.name,
            description: product.description,
            image1: product.image1,
            image2: product.image2,
            quantity: quantity,
            individualPrice: price,
            mrp: mrp,
          };
        });
        // ------------------------------------------------------------------------
    const { category, subcategory } = req.query;
    let sql = `SELECT DISTINCT product.* FROM product`;
    // Join with category table if category filter is provided
    if (category) {
      sql += ` INNER JOIN category ON product.category_id = category.category_id WHERE category.category_id IN (${category})`;
    } else {
      sql += ` INNER JOIN category ON product.category_id = category.category_id`;
    }
    // Join with subcategory table if subcategory filter is provided
    if (subcategory) {
      // If category filter was applied, we use AND instead of WHERE
      if (category) {
        sql += ` AND`;
      } else {
        sql += ` WHERE`;
      }
      sql += ` product.subcategory_id IN (${subcategory})`;
    }
    try {
      const data = await queryDatabase(connection, sql);
      if (data.length > 0) {
        // console.log("products ================>", products);

        data.map((item) => {
          // Find the corresponding product in the products array
          const matchingProduct = products.find(
            (product) => product.pid === item.id
          );

          // If a matching product is found, update the item with individualPrice and mrp
          if (matchingProduct) {
            item.individualPrice = matchingProduct.individualPrice;
            item.mrp = matchingProduct.mrp;
          }

          console.log("item =========>", item);
        });

        res.json({
          message: "Success",
          data: data,
        });
      } else {
        res.json({
          message: "No data found",
          data: [],
        });
      }
    } catch (error) {
      console.error("Error executing SQL query:", error);
      res.status(500).json({ error: "Internal Server Error" });
    }
  } catch {
    res.send("404 Somthing went wrong");
  }


        
};